
pipeline {
    agent any 
    
    tools {
        jdk 'jdk17' 
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    parameters {
        // Active Choice parameter with 3 scan options
        choice(
            name: 'SCAN_TYPE',
            choices: ['Baseline', 'API', 'FULL'],
            description: 'Select the type of ZAP scan you want to run.'
        )
    }
    
    stages {
        stage(" Maven Test ") {
            steps {
                sh "mvn test"
            }
        }
        
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=devsecops \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=devsecops \
                    -Dsonar.coverage.exclusions=**/test/** \
                    -Dsonar.coverage.minimumCoverage=80 \
                    -Dsonar.security.hotspots=true \
                    -Dsonar.issue.severity=HIGH
                    '''
                }
            }
        }
        stage('Owasp Dependency Check') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    timeout(time: 60, unit: 'MINUTES') {
                        dependencyCheck additionalArguments: '--scan ./ --format HTML --failOnCVSS 7', odcInstallation: 'dp'
                        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                    }
                }
            }
        }
        stage("Build") {
            steps {
                sh "mvn clean install"
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image"
                    
                }
            }
        }
        stage('Lint Dockerfile') {
            steps {
                // Step 1: Lint the Dockerfile using Hadolint
                script {
                    // Run Hadolint Docker image and save output to a text file
                    sh 'docker run --rm -i hadolint/hadolint < Dockerfile > hadolint_report.txt'
                }
            }
        }
        stage('Docker Image Vulnerability Scanning') {
            steps {
                script {
                    // Run Trivy to scan the 'hello-world' Docker image for vulnerabilities
                    sh '''
                    docker pull hello-world
                    docker run --rm -v $(pwd):/root/.cache/ aquasec/trivy image --severity HIGH,CRITICAL --format table hello-world > trivy_test_report.txt
                    '''
                    
                    // Archive the generated text file for reviewing the test report
                    archiveArtifacts artifacts: 'trivy_test_report.txt', allowEmptyArchive: false
                }
            }
        }
        stages {
        stage('ZAP Scan') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    script {
                        // Define the script based on selected parameter
                        def zapScript
                        def reportFile
                        if (params.SCAN_TYPE == 'Baseline') {
                            zapScript = 'zap-baseline.py'
                            reportFile = 'zap_baseline_report.html'
                        } else if (params.SCAN_TYPE == 'API') {
                            zapScript = 'zap-api-scan.py'
                            reportFile = 'zap_api_report.html'
                        } else if (params.SCAN_TYPE == 'FULL') {
                            zapScript = 'zap-full-scan.py'
                            reportFile = 'zap_full_report.html'
                        }

                        // Run the respective ZAP script using Docker
                        def status = sh(script: '''
                        docker run -v $PWD:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable \
                        ''' + zapScript + ''' -t https://www.example.com > ''' + reportFile, returnStatus: true)
                        archiveArtifacts artifacts: '*.html', allowEmptyArchive: true
                    }
                }
            }
        }
        
        
    }
}
